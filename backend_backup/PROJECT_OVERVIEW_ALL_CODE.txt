# SEEDCOOP AI Reigns - 전체 주요 코드/설정 모음 (실제 코드 전체)

## 1. 백엔드 (FastAPI)

### 1-1. 앱 진입점 및 설정

#### app/main.py
```python
from fastapi import FastAPI
# from starlette.middleware.cors import CORSMiddleware # CORS 설정 시 필요

from app.presentation.api.v1.api import api_router_v1 # v1 API 라우터 임포트
# from app.core.config import settings # 프로젝트 설정 로드

app = FastAPI(
    title="Interactive Story Game API", # 프로젝트 제목
    openapi_url="/api/v1/openapi.json" # OpenAPI 스키마 경로
)

# CORS 미들웨어 설정 (프론트엔드와 다른 도메인에서 API 호출 시 필요)
# if settings.BACKEND_CORS_ORIGINS:
#     app.add_middleware(
#         CORSMiddleware,
#         allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS],
#         allow_credentials=True,
#         allow_methods=["*"],
#         allow_headers=["*"],
#     )

# /v1 경로로 API 라우터 포함
app.include_router(api_router_v1, prefix="/api/v1")

@app.get("/") # 루트 경로 핸들러 (선택 사항)
async def root():
    return {"message": "인터랙티브 스토리 게임 API에 오신 것을 환영합니다!"}
```

#### app/core/config.py
```python
from pydantic_settings import BaseSettings, SettingsConfigDict
from functools import lru_cache
from typing import Optional, List

class Settings(BaseSettings):
    PROJECT_NAME: str = "Interactive Story Game API"
    API_V1_STR: str = "/api/v1"

    # .env 파일에서 직접 DATABASE_URL을 읽어오도록 설정
    DATABASE_URL: str # 예: "postgresql://won:mypassword123@localhost:5432/app_db"

    # JWT 토큰 설정
    SECRET_KEY: str = "a_very_secret_key_for_jwt_please_change_this" # 실제 운영 시 반드시 변경
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 7 # 예: 7일

    # LLM API 키
    OPENAI_API_KEY: Optional[str] = None
    GEMINI_API_KEY: Optional[str] = None

    # CORS 설정 (필요시)
    # BACKEND_CORS_ORIGINS: List[str] = ["http://localhost:3000"] # 프론트엔드 주소 예시

    model_config = SettingsConfigDict(
        env_file=".env", # .env 파일 사용 명시
        env_file_encoding='utf-8',
        case_sensitive=False, # .env 파일의 변수 이름 대소문자 구분 안 함
        extra='ignore' # Settings 모델에 정의되지 않은 .env 변수는 무시
    )

    @property
    def SYNC_DATABASE_URL(self) -> str:
        # DATABASE_URL 필드를 직접 반환 (Alembic 및 동기 DB 연결에 사용)
        if not self.DATABASE_URL:
            raise ValueError("DATABASE_URL is not set in the environment variables.")
        return self.DATABASE_URL

    @property
    def ASYNC_DATABASE_URL(self) -> Optional[str]:
        # 비동기 드라이버 사용 시 (현재는 미사용)
        # if self.DATABASE_URL:
        #     return self.DATABASE_URL.replace("postgresql://", "postgresql+asyncpg://")
        return None

@lru_cache() # 설정 객체는 한 번만 로드하도록 캐싱
def get_settings() -> Settings:
    return Settings()

settings = get_settings()
```

#### app/core/deps.py
```python
from typing import Generator, Optional
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from jose import JWTError, jwt
from pydantic import ValidationError # Pydantic V2에서는 pydantic_core.ValidationError 일 수 있음

from app.core.config import settings
from app.domain.models.user import User
from app.infrastructure.db.session import SessionLocal
from app.application.services.user_service import user_service # user_service 임포트
from app.schemas.token_schema import TokenData

oauth2_scheme = OAuth2PasswordBearer(tokenUrl=f"{settings.API_V1_STR}/users/login") # 정확한 토큰 URL 명시

def get_db() -> Generator:
    try:
        db = SessionLocal()
        yield db
    finally:
        db.close()

async def get_current_user(
    db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)
) -> User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="유효한 자격 증명이 없습니다.",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(
            token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM]
        )
        subject: Optional[str] = payload.get("sub")
        if subject is None:
            raise credentials_exception
        token_data = TokenData(sub=subject)
    except (JWTError, ValidationError):
        raise credentials_exception
    
    user = user_service.get_user_by_email(db, email=token_data.sub) 
    
    if user is None:
        raise credentials_exception
    return user

async def get_current_active_user(
    current_user: User = Depends(get_current_user),
) -> User:
    if not current_user.is_active:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="비활성화된 사용자입니다.")
    return current_user
```

# ... (이하 각 파일별 실제 코드 계속 추가, 필요시 요청) ...
